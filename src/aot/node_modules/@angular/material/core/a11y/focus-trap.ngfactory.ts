/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/material/core/a11y/focus-trap';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/render/api';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/constants';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '@angular/material/core/a11y/interactivity-checker';
import * as import9 from '@angular/core/src/linker/query_list';
import * as import10 from '@angular/core/src/linker/element_ref';
export class Wrapper_FocusTrap {
  /*private*/ _eventHandler:Function;
  context:import0.FocusTrap;
  /*private*/ _changed:boolean;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.FocusTrap(p0);
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_FocusTrap_Host:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,([] as any[]),{});
class View_FocusTrap_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.FocusTrap>;
  _FocusTrap_0_3:Wrapper_FocusTrap;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_FocusTrap_Host0,renderType_FocusTrap_Host,import5.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'focus-trap',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_FocusTrap0(this.viewUtils,this,0,this._el_0);
    this._FocusTrap_0_3 = new Wrapper_FocusTrap(this.injectorGet(import8.InteractivityChecker,this.parentIndex));
    this.compView_0.create(this._FocusTrap_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._FocusTrap_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.FocusTrap) && (0 === requestNodeIndex))) { return this._FocusTrap_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._FocusTrap_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const FocusTrapNgFactory:import7.ComponentFactory<import0.FocusTrap> = new import7.ComponentFactory<import0.FocusTrap>('focus-trap',View_FocusTrap_Host0,import0.FocusTrap);
const styles_FocusTrap:any[] = ([] as any[]);
var renderType_FocusTrap:import2.RenderComponentType = import3.createRenderComponentType('',1,import4.ViewEncapsulation.None,styles_FocusTrap,{});
export class View_FocusTrap0 extends import1.AppView<import0.FocusTrap> {
  _viewQuery_trappedContent_0:import9.QueryList<any>;
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _el_5:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_FocusTrap0,renderType_FocusTrap,import5.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_trappedContent_0 = new import9.QueryList<any>();
    this._text_0 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'tabindex','0'),(null as any));
    this._text_2 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,parentRenderNode,'div',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.projectNodes(this._el_3,0);
    this._text_4 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    this._el_5 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'tabindex','0'),(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_1,new import3.InlineArray2(2,'focus',(null as any)),this.eventHandler(this.handleEvent_1));
    var disposable_1:Function = import3.subscribeToRenderElement(this,this._el_5,new import3.InlineArray2(2,'focus',(null as any)),this.eventHandler(this.handleEvent_5));
    this._viewQuery_trappedContent_0.reset([new import10.ElementRef(this._el_3)]);
    this.context.trappedContent = this._viewQuery_trappedContent_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._el_5
    ]
    ),[
      disposable_0,
      disposable_1
    ]
    );
    return (null as any);
  }
  handleEvent_1(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'focus')) {
      const pd_sub_0:any = ((<any>this.context.focusLastTabbableElement()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  handleEvent_5(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'focus')) {
      const pd_sub_0:any = ((<any>this.context.focusFirstTabbableElement()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}