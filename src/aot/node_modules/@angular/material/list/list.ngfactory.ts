/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/list/list';
import * as import2 from '@angular/material/core/line/line';
import * as import3 from '@angular/core/src/di/injector';
import * as import4 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/render/api';
import * as import6 from '@angular/core/src/linker/view_utils';
import * as import7 from '@angular/core/src/metadata/view';
import * as import8 from '@angular/core/src/linker/view_type';
import * as import9 from '@angular/core/src/change_detection/constants';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from './list.css.ngstyle';
import * as import12 from '@angular/core/src/linker/query_list';
import * as import13 from '@angular/core/src/linker/element_ref';
import * as import14 from '@angular/core/src/change_detection/change_detection_util';
class MdListModuleInjector extends import0.NgModuleInjector<import1.MdListModule> {
  _MdLineModule_0:import2.MdLineModule;
  _MdListModule_1:import1.MdListModule;
  constructor(parent:import3.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  createInternal():import1.MdListModule {
    this._MdLineModule_0 = new import2.MdLineModule();
    this._MdListModule_1 = new import1.MdListModule();
    return this._MdListModule_1;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.MdLineModule)) { return this._MdLineModule_0; }
    if ((token === import1.MdListModule)) { return this._MdListModule_1; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdListModuleNgFactory:import0.NgModuleFactory<import1.MdListModule> = new import0.NgModuleFactory(MdListModuleInjector,import1.MdListModule);
export class Wrapper_MdList {
  /*private*/ _eventHandler:Function;
  context:import1.MdList;
  /*private*/ _changed:boolean;
  constructor() {
    this._changed = false;
    this.context = new import1.MdList();
  }
  ngOnDetach(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import4.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import4.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdListItem {
  /*private*/ _eventHandler:Function;
  context:import1.MdListItem;
  /*private*/ _changed:boolean;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import1.MdListItem(p0,p1);
  }
  ngOnDetach(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import4.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'focus')) {
      const pd_sub_0:any = ((<any>this.context._handleFocus()) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'blur')) {
      const pd_sub_1:any = ((<any>this.context._handleBlur()) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
  subscribe(view:import4.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdListDivider {
  /*private*/ _eventHandler:Function;
  context:import1.MdListDivider;
  /*private*/ _changed:boolean;
  constructor() {
    this._changed = false;
    this.context = new import1.MdListDivider();
  }
  ngOnDetach(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import4.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import4.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdListAvatar {
  /*private*/ _eventHandler:Function;
  context:import1.MdListAvatar;
  /*private*/ _changed:boolean;
  constructor() {
    this._changed = false;
    this.context = new import1.MdListAvatar();
  }
  ngOnDetach(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import4.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import4.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_MdList_Host:import5.RenderComponentType = import6.createRenderComponentType('',0,import7.ViewEncapsulation.None,([] as any[]),{});
class View_MdList_Host0 extends import4.AppView<any> {
  _el_0:any;
  compView_0:import4.AppView<import1.MdList>;
  _MdList_0_3:Wrapper_MdList;
  constructor(viewUtils:import6.ViewUtils,parentView:import4.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdList_Host0,renderType_MdList_Host,import8.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import9.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import6.selectOrCreateRenderHostElement(this.renderer,'md-list',new import6.InlineArray2(2,'role','list'),rootSelector,(null as any));
    this.compView_0 = new View_MdList0(this.viewUtils,this,0,this._el_0);
    this._MdList_0_3 = new Wrapper_MdList();
    this.compView_0.create(this._MdList_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import10.ComponentRef_<any>(0,this,this._el_0,this._MdList_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdList) && (0 === requestNodeIndex))) { return this._MdList_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._MdList_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const MdListNgFactory:import10.ComponentFactory<import1.MdList> = new import10.ComponentFactory<import1.MdList>('md-list, md-nav-list',View_MdList_Host0,import1.MdList);
const styles_MdList:any[] = [import11.styles];
var renderType_MdList:import5.RenderComponentType = import6.createRenderComponentType('',1,import7.ViewEncapsulation.None,styles_MdList,{});
export class View_MdList0 extends import4.AppView<import1.MdList> {
  constructor(viewUtils:import6.ViewUtils,parentView:import4.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdList0,renderType_MdList,import8.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import9.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this.projectNodes(parentRenderNode,0);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): ([] as any[])),(null as any));
    return (null as any);
  }
}
var renderType_MdListItem_Host:import5.RenderComponentType = import6.createRenderComponentType('',0,import7.ViewEncapsulation.None,([] as any[]),{});
class View_MdListItem_Host0 extends import4.AppView<any> {
  _el_0:any;
  compView_0:import4.AppView<import1.MdListItem>;
  _MdListItem_0_3:Wrapper_MdListItem;
  _query_MdLine_0_0:import12.QueryList<any>;
  _query_MdListAvatar_0_1:import12.QueryList<any>;
  constructor(viewUtils:import6.ViewUtils,parentView:import4.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdListItem_Host0,renderType_MdListItem_Host,import8.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import9.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import6.selectOrCreateRenderHostElement(this.renderer,'md-list-item',new import6.InlineArray2(2,'role','listitem'),rootSelector,(null as any));
    this.compView_0 = new View_MdListItem0(this.viewUtils,this,0,this._el_0);
    this._MdListItem_0_3 = new Wrapper_MdListItem(this.renderer,new import13.ElementRef(this._el_0));
    this._query_MdLine_0_0 = new import12.QueryList<any>();
    this._query_MdListAvatar_0_1 = new import12.QueryList<any>();
    this.compView_0.create(this._MdListItem_0_3.context);
    var disposable_0:Function = import6.subscribeToRenderElement(this,this._el_0,new import6.InlineArray4(4,'focus',(null as any),'blur',(null as any)),this.eventHandler(this.handleEvent_0));
    this._query_MdListAvatar_0_1.reset(([] as any[]));
    this._MdListItem_0_3.context._hasAvatar = this._query_MdListAvatar_0_1.first;
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return new import10.ComponentRef_<any>(0,this,this._el_0,this._MdListItem_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdListItem) && (0 === requestNodeIndex))) { return this._MdListItem_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._MdListItem_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    if (!throwOnChange) {
      if (this._query_MdLine_0_0.dirty) {
        this._query_MdLine_0_0.reset(([] as any[]));
        this._MdListItem_0_3.context._lines = this._query_MdLine_0_0;
        this._query_MdLine_0_0.notifyOnChanges();
      }
      if ((this.numberOfChecks === 0)) { this._MdListItem_0_3.context.ngAfterContentInit(); }
    }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
    if (((nodeIndex == 0) && (ngContentIndex == 1))) {  }
    if (((nodeIndex == 0) && (ngContentIndex == 2))) {  }
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.compView_0.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._MdListItem_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
export const MdListItemNgFactory:import10.ComponentFactory<import1.MdListItem> = new import10.ComponentFactory<import1.MdListItem>('md-list-item, a[md-list-item]',View_MdListItem_Host0,import1.MdListItem);
const styles_MdListItem:any[] = ([] as any[]);
var renderType_MdListItem:import5.RenderComponentType = import6.createRenderComponentType('',3,import7.ViewEncapsulation.None,styles_MdListItem,{});
export class View_MdListItem0 extends import4.AppView<import1.MdListItem> {
  _el_0:any;
  _text_1:any;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _text_5:any;
  _text_6:any;
  /*private*/ _expr_7:any;
  constructor(viewUtils:import6.ViewUtils,parentView:import4.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdListItem0,renderType_MdListItem,import8.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import9.ChangeDetectorStatus.CheckAlways);
    this._expr_7 = import14.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import6.createRenderElement(this.renderer,parentRenderNode,'div',new import6.InlineArray2(2,'class','md-list-item'),(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this.projectNodes(this._el_0,0);
    this._text_2 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this._el_3 = import6.createRenderElement(this.renderer,this._el_0,'div',new import6.InlineArray2(2,'class','md-list-text'),(null as any));
    this.projectNodes(this._el_3,1);
    this._text_4 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this.projectNodes(this._el_0,2);
    this._text_5 = this.renderer.createText(this._el_0,'\n',(null as any));
    this._text_6 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5,
      this._text_6
    ]
    ),(null as any));
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_7:any = this.context._hasFocus;
    if (import6.checkBinding(throwOnChange,this._expr_7,currVal_7)) {
      this.renderer.setElementClass(this._el_0,'md-list-item-focus',currVal_7);
      this._expr_7 = currVal_7;
    }
  }
}