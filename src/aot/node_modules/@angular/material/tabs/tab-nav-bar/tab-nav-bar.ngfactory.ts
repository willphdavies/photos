/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/material/tabs/tab-nav-bar/tab-nav-bar';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/change_detection/change_detection_util';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from './tab-nav-bar.css.ngstyle';
import * as import10 from '@angular/core/src/linker/query_list';
import * as import11 from '../ink-bar.ngfactory';
import * as import12 from '@angular/core/src/linker/element_ref';
import * as import13 from '@angular/material/tabs/ink-bar';
export class Wrapper_MdTabNavBar {
  /*private*/ _eventHandler:Function;
  context:import0.MdTabNavBar;
  /*private*/ _changed:boolean;
  constructor() {
    this._changed = false;
    this.context = new import0.MdTabNavBar();
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdTabLink {
  /*private*/ _eventHandler:Function;
  context:import0.MdTabLink;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import0.MdTabLink(p0,p1);
    this._expr_0 = import2.UNINITIALIZED;
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_active(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.active = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_MdTabNavBar_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_MdTabNavBar_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.MdTabNavBar>;
  _MdTabNavBar_0_3:Wrapper_MdTabNavBar;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdTabNavBar_Host0,renderType_MdTabNavBar_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'div',new import3.InlineArray2(2,'md-tab-nav-bar',''),rootSelector,(null as any));
    this.compView_0 = new View_MdTabNavBar0(this.viewUtils,this,0,this._el_0);
    this._MdTabNavBar_0_3 = new Wrapper_MdTabNavBar();
    this.compView_0.create(this._MdTabNavBar_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._MdTabNavBar_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.MdTabNavBar) && (0 === requestNodeIndex))) { return this._MdTabNavBar_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._MdTabNavBar_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const MdTabNavBarNgFactory:import8.ComponentFactory<import0.MdTabNavBar> = new import8.ComponentFactory<import0.MdTabNavBar>('[md-tab-nav-bar]',View_MdTabNavBar_Host0,import0.MdTabNavBar);
const styles_MdTabNavBar:any[] = [import9.styles];
var renderType_MdTabNavBar:import4.RenderComponentType = import3.createRenderComponentType('',1,import5.ViewEncapsulation.None,styles_MdTabNavBar,{});
export class View_MdTabNavBar0 extends import1.AppView<import0.MdTabNavBar> {
  _viewQuery_MdInkBar_0:import10.QueryList<any>;
  _text_0:any;
  _el_1:any;
  _MdInkBar_1_3:import11.Wrapper_MdInkBar;
  _text_2:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdTabNavBar0,renderType_MdTabNavBar,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_MdInkBar_0 = new import10.QueryList<any>();
    this.projectNodes(parentRenderNode,0);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'md-ink-bar',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._MdInkBar_1_3 = new import11.Wrapper_MdInkBar(this.renderer,new import12.ElementRef(this._el_1));
    this._text_2 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._viewQuery_MdInkBar_0.reset([this._MdInkBar_1_3.context]);
    this.context._inkBar = this._viewQuery_MdInkBar_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import13.MdInkBar) && (1 === requestNodeIndex))) { return this._MdInkBar_1_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._MdInkBar_1_3.ngDoCheck(this,this._el_1,throwOnChange);
  }
}