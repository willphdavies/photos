/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/slide-toggle/slide-toggle';
import * as import2 from '@angular/forms/src/directives';
import * as import3 from '@angular/forms/src/form_providers';
import * as import4 from '@angular/forms/src/directives/radio_control_value_accessor';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/change_detection/change_detection_util';
import * as import7 from '@angular/core/src/linker/view';
import * as import8 from '@angular/core/src/linker/view_utils';
import * as import9 from '@angular/core/src/render/api';
import * as import10 from '@angular/core/src/metadata/view';
import * as import11 from '@angular/core/src/linker/view_type';
import * as import12 from '@angular/core/src/change_detection/constants';
import * as import13 from '@angular/core/src/linker/component_factory';
import * as import14 from '@angular/core/src/linker/element_ref';
import * as import15 from '@angular/forms/src/directives/control_value_accessor';
import * as import16 from './slide-toggle.css.ngstyle';
class MdSlideToggleModuleInjector extends import0.NgModuleInjector<import1.MdSlideToggleModule> {
  _InternalFormsSharedModule_0:import2.InternalFormsSharedModule;
  _FormsModule_1:import3.FormsModule;
  _MdSlideToggleModule_2:import1.MdSlideToggleModule;
  __RadioControlRegistry_3:import4.RadioControlRegistry;
  constructor(parent:import5.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _RadioControlRegistry_3():import4.RadioControlRegistry {
    if ((this.__RadioControlRegistry_3 == null)) { (this.__RadioControlRegistry_3 = new import4.RadioControlRegistry()); }
    return this.__RadioControlRegistry_3;
  }
  createInternal():import1.MdSlideToggleModule {
    this._InternalFormsSharedModule_0 = new import2.InternalFormsSharedModule();
    this._FormsModule_1 = new import3.FormsModule();
    this._MdSlideToggleModule_2 = new import1.MdSlideToggleModule();
    return this._MdSlideToggleModule_2;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.InternalFormsSharedModule)) { return this._InternalFormsSharedModule_0; }
    if ((token === import3.FormsModule)) { return this._FormsModule_1; }
    if ((token === import1.MdSlideToggleModule)) { return this._MdSlideToggleModule_2; }
    if ((token === import4.RadioControlRegistry)) { return this._RadioControlRegistry_3; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdSlideToggleModuleNgFactory:import0.NgModuleFactory<import1.MdSlideToggleModule> = new import0.NgModuleFactory(MdSlideToggleModuleInjector,import1.MdSlideToggleModule);
export class Wrapper_MdSlideToggle {
  /*private*/ _eventHandler:Function;
  context:import1.MdSlideToggle;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  subscription0:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import1.MdSlideToggle(p0,p1);
    this._expr_0 = import6.UNINITIALIZED;
    this._expr_1 = import6.UNINITIALIZED;
    this._expr_2 = import6.UNINITIALIZED;
    this._expr_3 = import6.UNINITIALIZED;
    this._expr_4 = import6.UNINITIALIZED;
    this._expr_5 = import6.UNINITIALIZED;
    this._expr_6 = import6.UNINITIALIZED;
    this._expr_7 = import6.UNINITIALIZED;
    this._expr_8 = import6.UNINITIALIZED;
    this._expr_9 = import6.UNINITIALIZED;
    this._expr_10 = import6.UNINITIALIZED;
    this._expr_11 = import6.UNINITIALIZED;
  }
  ngOnDetach(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_name(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.name = currValue;
      this._expr_0 = currValue;
    }
  }
  check_id(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.id = currValue;
      this._expr_1 = currValue;
    }
  }
  check_tabIndex(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.tabIndex = currValue;
      this._expr_2 = currValue;
    }
  }
  check_ariaLabel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.ariaLabel = currValue;
      this._expr_3 = currValue;
    }
  }
  check_ariaLabelledby(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.ariaLabelledby = currValue;
      this._expr_4 = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._expr_5 = currValue;
    }
  }
  check_required(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.required = currValue;
      this._expr_6 = currValue;
    }
  }
  check_checked(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.checked = currValue;
      this._expr_7 = currValue;
    }
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context.color = currValue;
      this._expr_8 = currValue;
    }
  }
  ngDoCheck(view:import7.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_9:any = this.context.checked;
    if (import8.checkBinding(throwOnChange,this._expr_9,currVal_9)) {
      view.renderer.setElementClass(el,'md-checked',currVal_9);
      this._expr_9 = currVal_9;
    }
    const currVal_10:any = this.context.disabled;
    if (import8.checkBinding(throwOnChange,this._expr_10,currVal_10)) {
      view.renderer.setElementClass(el,'md-disabled',currVal_10);
      this._expr_10 = currVal_10;
    }
    const currVal_11:any = this.context._hasFocus;
    if (import8.checkBinding(throwOnChange,this._expr_11,currVal_11)) {
      view.renderer.setElementClass(el,'md-slide-toggle-focused',currVal_11);
      this._expr_11 = currVal_11;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'mousedown')) {
      const pd_sub_0:any = ((<any>this.context._setMousedown()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  subscribe(view:import7.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.change.subscribe(_eventHandler.bind(view,'change'))); }
  }
}
var renderType_MdSlideToggle_Host:import9.RenderComponentType = import8.createRenderComponentType('',0,import10.ViewEncapsulation.None,([] as any[]),{});
class View_MdSlideToggle_Host0 extends import7.AppView<any> {
  _el_0:any;
  compView_0:import7.AppView<import1.MdSlideToggle>;
  _MdSlideToggle_0_3:Wrapper_MdSlideToggle;
  __NG_VALUE_ACCESSOR_0_4:any[];
  constructor(viewUtils:import8.ViewUtils,parentView:import7.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdSlideToggle_Host0,renderType_MdSlideToggle_Host,import11.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import12.ChangeDetectorStatus.CheckAlways);
  }
  get _NG_VALUE_ACCESSOR_0_4():any[] {
    if ((this.__NG_VALUE_ACCESSOR_0_4 == null)) { (this.__NG_VALUE_ACCESSOR_0_4 = [this._MdSlideToggle_0_3.context]); }
    return this.__NG_VALUE_ACCESSOR_0_4;
  }
  createInternal(rootSelector:string):import13.ComponentRef<any> {
    this._el_0 = import8.selectOrCreateRenderHostElement(this.renderer,'md-slide-toggle',import8.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_MdSlideToggle0(this.viewUtils,this,0,this._el_0);
    this._MdSlideToggle_0_3 = new Wrapper_MdSlideToggle(new import14.ElementRef(this._el_0),this.renderer);
    this.compView_0.create(this._MdSlideToggle_0_3.context);
    var disposable_0:Function = import8.subscribeToRenderElement(this,this._el_0,new import8.InlineArray2(2,'mousedown',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return new import13.ComponentRef_<any>(0,this,this._el_0,this._MdSlideToggle_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdSlideToggle) && (0 === requestNodeIndex))) { return this._MdSlideToggle_0_3.context; }
    if (((token === import15.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._MdSlideToggle_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._MdSlideToggle_0_3.context.ngAfterContentInit(); } }
    this._MdSlideToggle_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._MdSlideToggle_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.compView_0.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._MdSlideToggle_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
export const MdSlideToggleNgFactory:import13.ComponentFactory<import1.MdSlideToggle> = new import13.ComponentFactory<import1.MdSlideToggle>('md-slide-toggle',View_MdSlideToggle_Host0,import1.MdSlideToggle);
const styles_MdSlideToggle:any[] = [import16.styles];
var renderType_MdSlideToggle:import9.RenderComponentType = import8.createRenderComponentType('',1,import10.ViewEncapsulation.None,styles_MdSlideToggle,{});
export class View_MdSlideToggle0 extends import7.AppView<import1.MdSlideToggle> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  _text_3:any;
  _el_4:any;
  _text_5:any;
  _el_6:any;
  _text_7:any;
  _el_8:any;
  _text_9:any;
  _el_10:any;
  _text_11:any;
  _text_12:any;
  _text_13:any;
  _el_14:any;
  _text_15:any;
  _text_16:any;
  _el_17:any;
  _text_18:any;
  _text_19:any;
  _text_20:any;
  _text_21:any;
  /*private*/ _expr_22:any;
  /*private*/ _expr_23:any;
  /*private*/ _expr_24:any;
  /*private*/ _expr_25:any;
  /*private*/ _expr_26:any;
  /*private*/ _expr_27:any;
  /*private*/ _expr_28:any;
  /*private*/ _expr_29:any;
  constructor(viewUtils:import8.ViewUtils,parentView:import7.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdSlideToggle0,renderType_MdSlideToggle,import11.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import12.ChangeDetectorStatus.CheckOnce);
    this._expr_22 = import6.UNINITIALIZED;
    this._expr_23 = import6.UNINITIALIZED;
    this._expr_24 = import6.UNINITIALIZED;
    this._expr_25 = import6.UNINITIALIZED;
    this._expr_26 = import6.UNINITIALIZED;
    this._expr_27 = import6.UNINITIALIZED;
    this._expr_28 = import6.UNINITIALIZED;
    this._expr_29 = import6.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import13.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import8.createRenderElement(this.renderer,parentRenderNode,'label',new import8.InlineArray2(2,'class','md-slide-toggle-label'),(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n\n  ',(null as any));
    this._el_2 = import8.createRenderElement(this.renderer,this._el_0,'div',new import8.InlineArray2(2,'class','md-slide-toggle-container'),(null as any));
    this._text_3 = this.renderer.createText(this._el_2,'\n    ',(null as any));
    this._el_4 = import8.createRenderElement(this.renderer,this._el_2,'div',new import8.InlineArray2(2,'class','md-slide-toggle-bar'),(null as any));
    this._text_5 = this.renderer.createText(this._el_2,'\n\n    ',(null as any));
    this._el_6 = import8.createRenderElement(this.renderer,this._el_2,'div',new import8.InlineArray2(2,'class','md-slide-toggle-thumb-container'),(null as any));
    this._text_7 = this.renderer.createText(this._el_6,'\n\n      ',(null as any));
    this._el_8 = import8.createRenderElement(this.renderer,this._el_6,'div',new import8.InlineArray2(2,'class','md-slide-toggle-thumb'),(null as any));
    this._text_9 = this.renderer.createText(this._el_8,'\n        ',(null as any));
    this._el_10 = import8.createRenderElement(this.renderer,this._el_8,'div',new import8.InlineArray2(2,'class','md-ink-ripple'),(null as any));
    this._text_11 = this.renderer.createText(this._el_8,'\n      ',(null as any));
    this._text_12 = this.renderer.createText(this._el_6,'\n    ',(null as any));
    this._text_13 = this.renderer.createText(this._el_2,'\n\n    ',(null as any));
    this._el_14 = import8.createRenderElement(this.renderer,this._el_2,'input',new import8.InlineArray4(4,'class','md-slide-toggle-input md-visually-hidden','type','checkbox'),(null as any));
    this._text_15 = this.renderer.createText(this._el_2,'\n  ',(null as any));
    this._text_16 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this._el_17 = import8.createRenderElement(this.renderer,this._el_0,'span',new import8.InlineArray2(2,'class','md-slide-toggle-content'),(null as any));
    this._text_18 = this.renderer.createText(this._el_17,'\n    ',(null as any));
    this.projectNodes(this._el_17,0);
    this._text_19 = this.renderer.createText(this._el_17,'\n  ',(null as any));
    this._text_20 = this.renderer.createText(this._el_0,'\n',(null as any));
    this._text_21 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    var disposable_0:Function = import8.subscribeToRenderElement(this,this._el_6,new import8.InlineArray8(6,'slidestart',(null as any),'slide',(null as any),'slideend',(null as any)),this.eventHandler(this.handleEvent_6));
    var disposable_1:Function = import8.subscribeToRenderElement(this,this._el_14,new import8.InlineArray8(8,'blur',(null as any),'focus',(null as any),'change',(null as any),'click',(null as any)),this.eventHandler(this.handleEvent_14));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._el_4,
      this._text_5,
      this._el_6,
      this._text_7,
      this._el_8,
      this._text_9,
      this._el_10,
      this._text_11,
      this._text_12,
      this._text_13,
      this._el_14,
      this._text_15,
      this._text_16,
      this._el_17,
      this._text_18,
      this._text_19,
      this._text_20,
      this._text_21
    ]
    ),[
      disposable_0,
      disposable_1
    ]
    );
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_22:any = this.context.getInputId();
    if (import8.checkBinding(throwOnChange,this._expr_22,currVal_22)) {
      this.renderer.setElementProperty(this._el_14,'id',currVal_22);
      this._expr_22 = currVal_22;
    }
    const currVal_23:any = this.context.required;
    if (import8.checkBinding(throwOnChange,this._expr_23,currVal_23)) {
      this.renderer.setElementProperty(this._el_14,'required',currVal_23);
      this._expr_23 = currVal_23;
    }
    const currVal_24:any = this.context.tabIndex;
    if (import8.checkBinding(throwOnChange,this._expr_24,currVal_24)) {
      this.renderer.setElementProperty(this._el_14,'tabIndex',currVal_24);
      this._expr_24 = currVal_24;
    }
    const currVal_25:any = this.context.checked;
    if (import8.checkBinding(throwOnChange,this._expr_25,currVal_25)) {
      this.renderer.setElementProperty(this._el_14,'checked',currVal_25);
      this._expr_25 = currVal_25;
    }
    const currVal_26:any = this.context.disabled;
    if (import8.checkBinding(throwOnChange,this._expr_26,currVal_26)) {
      this.renderer.setElementProperty(this._el_14,'disabled',currVal_26);
      this._expr_26 = currVal_26;
    }
    const currVal_27:any = this.context.name;
    if (import8.checkBinding(throwOnChange,this._expr_27,currVal_27)) {
      this.renderer.setElementAttribute(this._el_14,'name',((currVal_27 == null)? (null as any): currVal_27.toString()));
      this._expr_27 = currVal_27;
    }
    const currVal_28:any = this.context.ariaLabel;
    if (import8.checkBinding(throwOnChange,this._expr_28,currVal_28)) {
      this.renderer.setElementAttribute(this._el_14,'aria-label',((currVal_28 == null)? (null as any): currVal_28.toString()));
      this._expr_28 = currVal_28;
    }
    const currVal_29:any = this.context.ariaLabelledby;
    if (import8.checkBinding(throwOnChange,this._expr_29,currVal_29)) {
      this.renderer.setElementAttribute(this._el_14,'aria-labelledby',((currVal_29 == null)? (null as any): currVal_29.toString()));
      this._expr_29 = currVal_29;
    }
  }
  handleEvent_6(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'slidestart')) {
      const pd_sub_0:any = ((<any>this.context._onDragStart()) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'slide')) {
      const pd_sub_1:any = ((<any>this.context._onDrag($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'slideend')) {
      const pd_sub_2:any = ((<any>this.context._onDragEnd()) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
  handleEvent_14(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'blur')) {
      const pd_sub_0:any = ((<any>this.context._onInputBlur()) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'focus')) {
      const pd_sub_1:any = ((<any>this.context._onInputFocus()) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'change')) {
      const pd_sub_2:any = ((<any>this.context._onChangeEvent($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'click')) {
      const pd_sub_3:any = ((<any>this.context._onInputClick($event)) !== false);
      result = (pd_sub_3 && result);
    }
    return result;
  }
}