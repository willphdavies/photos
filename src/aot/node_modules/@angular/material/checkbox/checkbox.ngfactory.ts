/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/checkbox/checkbox';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/material/core/ripple/ripple';
import * as import4 from '@angular/common/src/localization';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/i18n/tokens';
import * as import7 from '@angular/core/src/change_detection/change_detection_util';
import * as import8 from '@angular/core/src/linker/view';
import * as import9 from '@angular/core/src/linker/view_utils';
import * as import10 from '@angular/core/src/render/api';
import * as import11 from '@angular/core/src/metadata/view';
import * as import12 from '@angular/core/src/linker/view_type';
import * as import13 from '@angular/core/src/change_detection/constants';
import * as import14 from '@angular/core/src/linker/component_factory';
import * as import15 from '@angular/core/src/linker/element_ref';
import * as import16 from '@angular/forms/src/directives/control_value_accessor';
import * as import17 from './checkbox.css.ngstyle';
import * as import18 from '../core/ripple/ripple.ngfactory';
import * as import19 from '@angular/core/src/linker/view_container';
import * as import20 from '../../common/src/directives/ng_if.ngfactory';
import * as import21 from '@angular/core/src/linker/template_ref';
import * as import22 from '@angular/common/src/directives/ng_if';
class MdCheckboxModuleInjector extends import0.NgModuleInjector<import1.MdCheckboxModule> {
  _CommonModule_0:import2.CommonModule;
  _MdRippleModule_1:import3.MdRippleModule;
  _MdCheckboxModule_2:import1.MdCheckboxModule;
  __NgLocalization_3:import4.NgLocaleLocalization;
  constructor(parent:import5.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _NgLocalization_3():import4.NgLocaleLocalization {
    if ((this.__NgLocalization_3 == null)) { (this.__NgLocalization_3 = new import4.NgLocaleLocalization(this.parent.get(import6.LOCALE_ID))); }
    return this.__NgLocalization_3;
  }
  createInternal():import1.MdCheckboxModule {
    this._CommonModule_0 = new import2.CommonModule();
    this._MdRippleModule_1 = new import3.MdRippleModule();
    this._MdCheckboxModule_2 = new import1.MdCheckboxModule();
    return this._MdCheckboxModule_2;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CommonModule)) { return this._CommonModule_0; }
    if ((token === import3.MdRippleModule)) { return this._MdRippleModule_1; }
    if ((token === import1.MdCheckboxModule)) { return this._MdCheckboxModule_2; }
    if ((token === import4.NgLocalization)) { return this._NgLocalization_3; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdCheckboxModuleNgFactory:import0.NgModuleFactory<import1.MdCheckboxModule> = new import0.NgModuleFactory(MdCheckboxModuleInjector,import1.MdCheckboxModule);
export class Wrapper_MdCheckbox {
  /*private*/ _eventHandler:Function;
  context:import1.MdCheckbox;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  /*private*/ _expr_16:any;
  subscription0:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import1.MdCheckbox(p0,p1);
    this._expr_0 = import7.UNINITIALIZED;
    this._expr_1 = import7.UNINITIALIZED;
    this._expr_2 = import7.UNINITIALIZED;
    this._expr_3 = import7.UNINITIALIZED;
    this._expr_4 = import7.UNINITIALIZED;
    this._expr_5 = import7.UNINITIALIZED;
    this._expr_6 = import7.UNINITIALIZED;
    this._expr_7 = import7.UNINITIALIZED;
    this._expr_8 = import7.UNINITIALIZED;
    this._expr_9 = import7.UNINITIALIZED;
    this._expr_10 = import7.UNINITIALIZED;
    this._expr_11 = import7.UNINITIALIZED;
    this._expr_12 = import7.UNINITIALIZED;
    this._expr_13 = import7.UNINITIALIZED;
    this._expr_14 = import7.UNINITIALIZED;
    this._expr_15 = import7.UNINITIALIZED;
    this._expr_16 = import7.UNINITIALIZED;
  }
  ngOnDetach(view:import8.AppView<any>,componentView:import8.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_ariaLabel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.ariaLabel = currValue;
      this._expr_0 = currValue;
    }
  }
  check_ariaLabelledby(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.ariaLabelledby = currValue;
      this._expr_1 = currValue;
    }
  }
  check_id(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.id = currValue;
      this._expr_2 = currValue;
    }
  }
  check_disableRipple(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.disableRipple = currValue;
      this._expr_3 = currValue;
    }
  }
  check_required(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.required = currValue;
      this._expr_4 = currValue;
    }
  }
  check_align(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.align = currValue;
      this._expr_5 = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._expr_6 = currValue;
    }
  }
  check_tabindex(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.tabindex = currValue;
      this._expr_7 = currValue;
    }
  }
  check_name(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context.name = currValue;
      this._expr_8 = currValue;
    }
  }
  check_checked(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_9,currValue))) {
      this._changed = true;
      this.context.checked = currValue;
      this._expr_9 = currValue;
    }
  }
  check_indeterminate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_10,currValue))) {
      this._changed = true;
      this.context.indeterminate = currValue;
      this._expr_10 = currValue;
    }
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_11,currValue))) {
      this._changed = true;
      this.context.color = currValue;
      this._expr_11 = currValue;
    }
  }
  ngDoCheck(view:import8.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import8.AppView<any>,componentView:import8.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_12:any = this.context.indeterminate;
    if (import9.checkBinding(throwOnChange,this._expr_12,currVal_12)) {
      view.renderer.setElementClass(el,'md-checkbox-indeterminate',currVal_12);
      this._expr_12 = currVal_12;
    }
    const currVal_13:any = this.context.checked;
    if (import9.checkBinding(throwOnChange,this._expr_13,currVal_13)) {
      view.renderer.setElementClass(el,'md-checkbox-checked',currVal_13);
      this._expr_13 = currVal_13;
    }
    const currVal_14:any = this.context.disabled;
    if (import9.checkBinding(throwOnChange,this._expr_14,currVal_14)) {
      view.renderer.setElementClass(el,'md-checkbox-disabled',currVal_14);
      this._expr_14 = currVal_14;
    }
    const currVal_15:any = (this.context.align == 'end');
    if (import9.checkBinding(throwOnChange,this._expr_15,currVal_15)) {
      view.renderer.setElementClass(el,'md-checkbox-align-end',currVal_15);
      this._expr_15 = currVal_15;
    }
    const currVal_16:any = this.context.hasFocus;
    if (import9.checkBinding(throwOnChange,this._expr_16,currVal_16)) {
      view.renderer.setElementClass(el,'md-checkbox-focused',currVal_16);
      this._expr_16 = currVal_16;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import8.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.change.subscribe(_eventHandler.bind(view,'change'))); }
  }
}
var renderType_MdCheckbox_Host:import10.RenderComponentType = import9.createRenderComponentType('',0,import11.ViewEncapsulation.None,([] as any[]),{});
class View_MdCheckbox_Host0 extends import8.AppView<any> {
  _el_0:any;
  compView_0:import8.AppView<import1.MdCheckbox>;
  _MdCheckbox_0_3:Wrapper_MdCheckbox;
  __NG_VALUE_ACCESSOR_0_4:any[];
  constructor(viewUtils:import9.ViewUtils,parentView:import8.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdCheckbox_Host0,renderType_MdCheckbox_Host,import12.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import13.ChangeDetectorStatus.CheckAlways);
  }
  get _NG_VALUE_ACCESSOR_0_4():any[] {
    if ((this.__NG_VALUE_ACCESSOR_0_4 == null)) { (this.__NG_VALUE_ACCESSOR_0_4 = [this._MdCheckbox_0_3.context]); }
    return this.__NG_VALUE_ACCESSOR_0_4;
  }
  createInternal(rootSelector:string):import14.ComponentRef<any> {
    this._el_0 = import9.selectOrCreateRenderHostElement(this.renderer,'md-checkbox',import9.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_MdCheckbox0(this.viewUtils,this,0,this._el_0);
    this._MdCheckbox_0_3 = new Wrapper_MdCheckbox(this.renderer,new import15.ElementRef(this._el_0));
    this.compView_0.create(this._MdCheckbox_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import14.ComponentRef_<any>(0,this,this._el_0,this._MdCheckbox_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdCheckbox) && (0 === requestNodeIndex))) { return this._MdCheckbox_0_3.context; }
    if (((token === import16.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._MdCheckbox_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this._MdCheckbox_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._MdCheckbox_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const MdCheckboxNgFactory:import14.ComponentFactory<import1.MdCheckbox> = new import14.ComponentFactory<import1.MdCheckbox>('md-checkbox',View_MdCheckbox_Host0,import1.MdCheckbox);
const styles_MdCheckbox:any[] = [import17.styles];
class View_MdCheckbox1 extends import8.AppView<any> {
  _el_0:any;
  _MdRipple_0_3:import18.Wrapper_MdRipple;
  constructor(viewUtils:import9.ViewUtils,parentView:import8.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import19.ViewContainer) {
    super(View_MdCheckbox1,renderType_MdCheckbox,import12.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import13.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import14.ComponentRef<any> {
    this._el_0 = import9.createRenderElement(this.renderer,(null as any),'div',new import9.InlineArray8(6,'class','md-checkbox-ripple','md-ripple','','md-ripple-background-color','rgba(0, 0, 0, 0)'),(null as any));
    this._MdRipple_0_3 = new import18.Wrapper_MdRipple(new import15.ElementRef(this._el_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.MdRipple) && (0 === requestNodeIndex))) { return this._MdRipple_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.parentView.context.getHostElement();
    this._MdRipple_0_3.check_trigger(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = true;
    this._MdRipple_0_3.check_centered(currVal_0_0_1,throwOnChange,false);
    const currVal_0_0_2:any = 0.3;
    this._MdRipple_0_3.check_speedFactor(currVal_0_0_2,throwOnChange,false);
    const currVal_0_0_3:any = 'rgba(0, 0, 0, 0)';
    this._MdRipple_0_3.check_backgroundColor(currVal_0_0_3,throwOnChange,false);
    this._MdRipple_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._MdRipple_0_3.checkHost(this,this,this._el_0,throwOnChange);
  }
  destroyInternal():void {
    this._MdRipple_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
var renderType_MdCheckbox:import10.RenderComponentType = import9.createRenderComponentType('',1,import11.ViewEncapsulation.None,styles_MdCheckbox,{});
export class View_MdCheckbox0 extends import8.AppView<import1.MdCheckbox> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  _text_3:any;
  _el_4:any;
  _text_5:any;
  _anchor_6:any;
  /*private*/ _vc_6:import19.ViewContainer;
  _TemplateRef_6_5:any;
  _NgIf_6_6:import20.Wrapper_NgIf;
  _text_7:any;
  _el_8:any;
  _text_9:any;
  _el_10:any;
  _text_11:any;
  _el_12:any;
  _text_13:any;
  _el_14:any;
  _text_15:any;
  _text_16:any;
  _text_17:any;
  _el_18:any;
  _text_19:any;
  _text_20:any;
  _text_21:any;
  _el_22:any;
  _text_23:any;
  _text_24:any;
  _text_25:any;
  _text_26:any;
  /*private*/ _expr_30:any;
  /*private*/ _expr_31:any;
  /*private*/ _expr_32:any;
  /*private*/ _expr_33:any;
  /*private*/ _expr_34:any;
  /*private*/ _expr_35:any;
  /*private*/ _expr_36:any;
  /*private*/ _expr_37:any;
  /*private*/ _expr_38:any;
  constructor(viewUtils:import9.ViewUtils,parentView:import8.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdCheckbox0,renderType_MdCheckbox,import12.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import13.ChangeDetectorStatus.CheckOnce);
    this._expr_30 = import7.UNINITIALIZED;
    this._expr_31 = import7.UNINITIALIZED;
    this._expr_32 = import7.UNINITIALIZED;
    this._expr_33 = import7.UNINITIALIZED;
    this._expr_34 = import7.UNINITIALIZED;
    this._expr_35 = import7.UNINITIALIZED;
    this._expr_36 = import7.UNINITIALIZED;
    this._expr_37 = import7.UNINITIALIZED;
    this._expr_38 = import7.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import14.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import9.createRenderElement(this.renderer,parentRenderNode,'label',new import9.InlineArray2(2,'class','md-checkbox-layout'),(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this._el_2 = import9.createRenderElement(this.renderer,this._el_0,'div',new import9.InlineArray2(2,'class','md-checkbox-inner-container'),(null as any));
    this._text_3 = this.renderer.createText(this._el_2,'\n    ',(null as any));
    this._el_4 = import9.createRenderElement(this.renderer,this._el_2,'input',new import9.InlineArray4(4,'class','md-checkbox-input md-visually-hidden','type','checkbox'),(null as any));
    this._text_5 = this.renderer.createText(this._el_2,'\n    ',(null as any));
    this._anchor_6 = this.renderer.createTemplateAnchor(this._el_2,(null as any));
    this._vc_6 = new import19.ViewContainer(6,2,this,this._anchor_6);
    this._TemplateRef_6_5 = new import21.TemplateRef_(this,6,this._anchor_6);
    this._NgIf_6_6 = new import20.Wrapper_NgIf(this._vc_6.vcRef,this._TemplateRef_6_5);
    this._text_7 = this.renderer.createText(this._el_2,'\n    ',(null as any));
    this._el_8 = import9.createRenderElement(this.renderer,this._el_2,'div',new import9.InlineArray2(2,'class','md-checkbox-frame'),(null as any));
    this._text_9 = this.renderer.createText(this._el_2,'\n    ',(null as any));
    this._el_10 = import9.createRenderElement(this.renderer,this._el_2,'div',new import9.InlineArray2(2,'class','md-checkbox-background'),(null as any));
    this._text_11 = this.renderer.createText(this._el_10,'\n      ',(null as any));
    this._el_12 = import9.createRenderElement(this.renderer,this._el_10,':svg:svg',new import9.InlineArray16(10,':xml:space','preserve','class','md-checkbox-checkmark','version','1.1','viewBox','0 0 24 24','xmlns','http://www.w3.org/2000/svg'),(null as any));
    this._text_13 = this.renderer.createText(this._el_12,'\n        ',(null as any));
    this._el_14 = import9.createRenderElement(this.renderer,this._el_12,':svg:path',new import9.InlineArray8(8,'class','md-checkbox-checkmark-path','d','M4.1,12.7 9,17.6 20.3,6.3','fill','none','stroke','white'),(null as any));
    this._text_15 = this.renderer.createText(this._el_12,'\n      ',(null as any));
    this._text_16 = this.renderer.createText(this._el_10,'\n      ',(null as any));
    this._text_17 = this.renderer.createText(this._el_10,'\n      ',(null as any));
    this._el_18 = import9.createRenderElement(this.renderer,this._el_10,'div',new import9.InlineArray2(2,'class','md-checkbox-mixedmark'),(null as any));
    this._text_19 = this.renderer.createText(this._el_10,'\n    ',(null as any));
    this._text_20 = this.renderer.createText(this._el_2,'\n  ',(null as any));
    this._text_21 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this._el_22 = import9.createRenderElement(this.renderer,this._el_0,'span',new import9.InlineArray2(2,'class','md-checkbox-label'),(null as any));
    this._text_23 = this.renderer.createText(this._el_22,'\n    ',(null as any));
    this.projectNodes(this._el_22,0);
    this._text_24 = this.renderer.createText(this._el_22,'\n  ',(null as any));
    this._text_25 = this.renderer.createText(this._el_0,'\n',(null as any));
    this._text_26 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    var disposable_0:Function = import9.subscribeToRenderElement(this,this._el_4,new import9.InlineArray8(8,'focus',(null as any),'blur',(null as any),'change',(null as any),'click',(null as any)),this.eventHandler(this.handleEvent_4));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._el_4,
      this._text_5,
      this._anchor_6,
      this._text_7,
      this._el_8,
      this._text_9,
      this._el_10,
      this._text_11,
      this._el_12,
      this._text_13,
      this._el_14,
      this._text_15,
      this._text_16,
      this._text_17,
      this._el_18,
      this._text_19,
      this._text_20,
      this._text_21,
      this._el_22,
      this._text_23,
      this._text_24,
      this._text_25,
      this._text_26
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import21.TemplateRef) && (6 === requestNodeIndex))) { return this._TemplateRef_6_5; }
    if (((token === import22.NgIf) && (6 === requestNodeIndex))) { return this._NgIf_6_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_6_0_0:boolean = !this.context._isRippleDisabled();
    this._NgIf_6_6.check_ngIf(currVal_6_0_0,throwOnChange,false);
    this._NgIf_6_6.ngDoCheck(this,this._anchor_6,throwOnChange);
    this._vc_6.detectChangesInNestedViews(throwOnChange);
    const currVal_30:any = this.context.inputId;
    if (import9.checkBinding(throwOnChange,this._expr_30,currVal_30)) {
      this.renderer.setElementProperty(this._el_4,'id',currVal_30);
      this._expr_30 = currVal_30;
    }
    const currVal_31:any = this.context.required;
    if (import9.checkBinding(throwOnChange,this._expr_31,currVal_31)) {
      this.renderer.setElementProperty(this._el_4,'required',currVal_31);
      this._expr_31 = currVal_31;
    }
    const currVal_32:any = this.context.checked;
    if (import9.checkBinding(throwOnChange,this._expr_32,currVal_32)) {
      this.renderer.setElementProperty(this._el_4,'checked',currVal_32);
      this._expr_32 = currVal_32;
    }
    const currVal_33:any = this.context.disabled;
    if (import9.checkBinding(throwOnChange,this._expr_33,currVal_33)) {
      this.renderer.setElementProperty(this._el_4,'disabled',currVal_33);
      this._expr_33 = currVal_33;
    }
    const currVal_34:any = this.context.name;
    if (import9.checkBinding(throwOnChange,this._expr_34,currVal_34)) {
      this.renderer.setElementProperty(this._el_4,'name',currVal_34);
      this._expr_34 = currVal_34;
    }
    const currVal_35:any = this.context.tabindex;
    if (import9.checkBinding(throwOnChange,this._expr_35,currVal_35)) {
      this.renderer.setElementProperty(this._el_4,'tabIndex',currVal_35);
      this._expr_35 = currVal_35;
    }
    const currVal_36:any = this.context.indeterminate;
    if (import9.checkBinding(throwOnChange,this._expr_36,currVal_36)) {
      this.renderer.setElementProperty(this._el_4,'indeterminate',currVal_36);
      this._expr_36 = currVal_36;
    }
    const currVal_37:any = this.context.ariaLabel;
    if (import9.checkBinding(throwOnChange,this._expr_37,currVal_37)) {
      this.renderer.setElementAttribute(this._el_4,'aria-label',((currVal_37 == null)? (null as any): currVal_37.toString()));
      this._expr_37 = currVal_37;
    }
    const currVal_38:any = this.context.ariaLabelledby;
    if (import9.checkBinding(throwOnChange,this._expr_38,currVal_38)) {
      this.renderer.setElementAttribute(this._el_4,'aria-labelledby',((currVal_38 == null)? (null as any): currVal_38.toString()));
      this._expr_38 = currVal_38;
    }
  }
  destroyInternal():void {
    this._vc_6.destroyNestedViews();
  }
  createEmbeddedViewInternal(nodeIndex:number):import8.AppView<any> {
    if ((nodeIndex == 6)) { return new View_MdCheckbox1(this.viewUtils,this,6,this._anchor_6,this._vc_6); }
    return (null as any);
  }
  handleEvent_4(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'focus')) {
      const pd_sub_0:any = ((<any>this.context._onInputFocus()) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'blur')) {
      const pd_sub_1:any = ((<any>this.context._onInputBlur()) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'change')) {
      const pd_sub_2:any = ((<any>this.context._onInteractionEvent($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'click')) {
      const pd_sub_3:any = ((<any>this.context._onInputClick($event)) !== false);
      result = (pd_sub_3 && result);
    }
    return result;
  }
}